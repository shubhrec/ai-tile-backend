-- Migration: Create homes and generated_images tables
-- Description: Stores user home images and links generated images to tiles and homes
-- Author: System
-- Date: 2025-10-22

-- ============================================
-- HOMES TABLE
-- ============================================

-- Create homes table
CREATE TABLE IF NOT EXISTS homes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    name TEXT NOT NULL DEFAULT '',
    image_url TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Add index for faster user-specific queries
CREATE INDEX IF NOT EXISTS idx_homes_user_id ON homes(user_id);

-- Add index for ordering by creation time
CREATE INDEX IF NOT EXISTS idx_homes_created_at ON homes(created_at DESC);

-- Enable Row Level Security (RLS)
ALTER TABLE homes ENABLE ROW LEVEL SECURITY;

-- Policy: Users can view only their own homes
CREATE POLICY "Users can view own homes"
    ON homes
    FOR SELECT
    USING (auth.uid() = user_id);

-- Policy: Users can insert their own homes
CREATE POLICY "Users can insert own homes"
    ON homes
    FOR INSERT
    WITH CHECK (auth.uid() = user_id);

-- Policy: Users can update their own homes
CREATE POLICY "Users can update own homes"
    ON homes
    FOR UPDATE
    USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

-- Policy: Users can delete their own homes
CREATE POLICY "Users can delete own homes"
    ON homes
    FOR DELETE
    USING (auth.uid() = user_id);

-- Add comments to table
COMMENT ON TABLE homes IS 'User-uploaded home/room images that persist across sessions';
COMMENT ON COLUMN homes.id IS 'Unique home identifier';
COMMENT ON COLUMN homes.user_id IS 'Reference to auth.users - owner of this home';
COMMENT ON COLUMN homes.name IS 'Optional user-provided name/description for the home';
COMMENT ON COLUMN homes.image_url IS 'Supabase Storage URL of the home image';
COMMENT ON COLUMN homes.created_at IS 'Timestamp when home was created';

-- ============================================
-- GENERATED IMAGES TABLE
-- ============================================

-- Drop existing table if it exists (to recreate with new schema)
-- WARNING: This will delete existing data! Comment out if you want to preserve data
DROP TABLE IF EXISTS generated_images;

-- Create generated_images table with proper foreign keys
CREATE TABLE IF NOT EXISTS generated_images (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    tile_id BIGINT REFERENCES tiles(id) ON DELETE SET NULL,
    home_id BIGINT REFERENCES homes(id) ON DELETE SET NULL,
    image_url TEXT NOT NULL,
    prompt TEXT DEFAULT '',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Add indexes for faster queries
CREATE INDEX IF NOT EXISTS idx_generated_images_user_id ON generated_images(user_id);
CREATE INDEX IF NOT EXISTS idx_generated_images_tile_id ON generated_images(tile_id);
CREATE INDEX IF NOT EXISTS idx_generated_images_home_id ON generated_images(home_id);
CREATE INDEX IF NOT EXISTS idx_generated_images_created_at ON generated_images(created_at DESC);

-- Composite index for common query pattern (tile + user)
CREATE INDEX IF NOT EXISTS idx_generated_images_tile_user ON generated_images(tile_id, user_id);

-- Enable Row Level Security (RLS)
ALTER TABLE generated_images ENABLE ROW LEVEL SECURITY;

-- Policy: Users can view only their own generated images
CREATE POLICY "Users can view own generated images"
    ON generated_images
    FOR SELECT
    USING (auth.uid() = user_id);

-- Policy: Users can insert their own generated images
CREATE POLICY "Users can insert own generated images"
    ON generated_images
    FOR INSERT
    WITH CHECK (auth.uid() = user_id);

-- Policy: Users can update their own generated images
CREATE POLICY "Users can update own generated images"
    ON generated_images
    FOR UPDATE
    USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

-- Policy: Users can delete their own generated images
CREATE POLICY "Users can delete own generated images"
    ON generated_images
    FOR DELETE
    USING (auth.uid() = user_id);

-- Add comments to table
COMMENT ON TABLE generated_images IS 'AI-generated tile visualizations linked to user, tile, and home';
COMMENT ON COLUMN generated_images.id IS 'Unique generated image identifier';
COMMENT ON COLUMN generated_images.user_id IS 'Reference to auth.users - owner of this generated image';
COMMENT ON COLUMN generated_images.tile_id IS 'Reference to tiles - tile used for generation (nullable)';
COMMENT ON COLUMN generated_images.home_id IS 'Reference to homes - home/room used for generation (nullable)';
COMMENT ON COLUMN generated_images.image_url IS 'Supabase Storage URL of the generated image';
COMMENT ON COLUMN generated_images.prompt IS 'Text prompt or description used for generation';
COMMENT ON COLUMN generated_images.created_at IS 'Timestamp when image was generated';
